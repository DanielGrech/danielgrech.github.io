<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Daniel Grech]]></title>
  <link href="http://dgrech.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://dgrech.com/"/>
  <updated>2014-03-20T22:01:42+11:00</updated>
  <id>http://dgrech.com/</id>
  <author>
    <name><![CDATA[Daniel Grech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The power of custom compound views]]></title>
    <link href="http://dgrech.com/blog/2014/03/20/the-power-of-custom-compound-views/"/>
    <updated>2014-03-20T07:49:00+11:00</updated>
    <id>http://dgrech.com/blog/2014/03/20/the-power-of-custom-compound-views</id>
    <content type="html"><![CDATA[<p>As an app grows in features and complexity, the amount of code it takes to customise and polish the UI increases. Custom views can be a powerful tool in cleaning up your code and making it generally more pleasureable to read. Separating your view presentation code from your business logic (say, in your activity) is one of the basic tenants of <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>.</p>

<p>Let&rsquo;s look at a simple example of where this customisation can lead to bloated code. Consider populating a ListView with some items in your adapter. Too often do I see code like this:</p>

<p>``` java Base model class to present
public class Person {</p>

<pre><code>int mId;
String mName;
String mAddress;
int mAge;
Uri mAvatarUri;
</code></pre>

<p>}
```</p>

<p>``` xml Your list item layout &ndash; res/layout/li_person.xml
&lt;LinearLayout</p>

<pre><code>    xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="horizontal"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;
&lt;ImageView
        android:id="@+id/image"
        android:layout_width="64dp"
        android:layout_height="64dp"/&gt;
&lt;LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"&gt;
    &lt;TextView
            android:id="@+id/name"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/&gt;
    &lt;TextView
            android:id="@+id/address"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/&gt;
    &lt;TextView
            android:id="@+id/age"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>``` java Bloated adapter implementation
public class MyListAdapter extends BaseAdapter {</p>

<pre><code>private List&lt;Person&gt; mPersons;

public MyListAdapter(List&lt;Person&gt; persons) {
    mPersons = persons;
}

@Override
public int getCount() {
    return mPersons == null ? 0 : mPersons.size();
}

@Override
public Person getItem(int position) {
    return mPersons.get(position);
}

@Override
public long getItemId(int position) {
    return getItem(position).mId;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    final ViewHolder holder;
    if (convertView == null) {
        convertView = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.li_person, parent, false);

        holder = new ViewHolder();
        holder.mNameView = (TextView) convertView.findViewById(R.id.name);
        holder.mAddressView = (TextView) convertView.findViewById(R.id.address);
        holder.mAgeView = (TextView) convertView.findViewById(R.id.age);
        holder.mImageView = (ImageView) convertView.findViewById(R.id.image);

        convertView.setTag(holder);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }

    final Person p = getItem(position);

    holder.mNameView.setText(p.mName == null ? null : "Unknown");
    holder.mAddressView.setText(p.mAddress == null ? null : "Unknown");
    holder.mAgeView.setText(p.mAge &lt; 0 ?  "Unknown" : String.valueOf(p.mAge));

    if (p.mAvatarUri == null) {
        holder.mImageView.setVisibility(View.GONE);
    } else {
        holder.mImageView.setVisibility(View.VISIBLE);
        holder.mImageView.setImageURI(p.mAvatarUri);
    }

    return convertView;
}

// @See http://developer.android.com/training/improving-layouts/smooth-scrolling.html
private static class ViewHolder {
    TextView mNameView;
    TextView mAddressView;
    TextView mAgeView;
    ImageView mImageView;
}
</code></pre>

<p>} <br/>
```</p>

<p>This pattern is fine for the most basic use-cases (such as displaying a single TextView for each list item), but even in this small example there is a lot of presentation-specific cruft. Imagine a more complex view (remote image loading, date formatting, animation etc) and this code can quickly grow out of control!</p>

<p>Show what can we do about this? Encapsulate all of this logic in a custom view class!</p>

<!-- more -->


<p>Not only will using a custom view help this keep your activity code clean, it also encourages code reuse and removes all the ViewHolder boilerplate nobody likes to write.</p>

<p>First, update your xml layout:</p>

<p>``` xml res/layout/li_person.xml
&lt;com.example.app.view.PersonListItemView</p>

<pre><code>    xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="horizontal"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;
&lt;ImageView
        android:id="@+id/image"
        android:layout_width="64dp"
        android:layout_height="64dp"/&gt;
&lt;LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"&gt;
    &lt;TextView
            android:id="@+id/name"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/&gt;
    &lt;TextView
            android:id="@+id/address"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/&gt;
    &lt;TextView
            android:id="@+id/age"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>&lt;/com.example.app.view.PersonListItemView>
```</p>

<p>Note that we modified our root layout element to point to our custom view, defined below:</p>

<p>``` java Custom compound view
public class PersonListItemView extends LinearLayout {</p>

<pre><code>TextView mNameView;

TextView mAddressView;

TextView mAgeView;

ImageView mImageView;

public static PersonListItemView inflate(ViewGroup parent) {
    return (Person) LayoutInflater.from(parent.getContext())
            .inflate(R.layout.li_person, parent, false);
}

public PersonListItemView(Context context) {
    super(context);
}

public PersonListItemView(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public PersonListItemView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
}

@Override
protected void onFinishInflate() {
    super.onFinishInflate();

    mNameView = (TextView) findViewById(R.id.name);
    mAddressView = (TextView) findViewById(R.id.address);
    mAgeView = (TextView) findViewById(R.id.age);
    mImageView = (ImageView) findViewById(R.id.image);
}

public void populate(Person p) {
    mNameView.setText(p.mName == null ? null : "Unknown");
    mAddressView.setText(p.mAddress == null ? null : "Unknown");
    mAgeView.setText(p.mAge &lt; 0 ?  "Unknown" : String.valueOf(p.mAge));

    if (p.mAvatarUri == null) {
        mImageView.setVisibility(View.GONE);
    } else {
        mImageView.setVisibility(View.VISIBLE);
        mImageView.setImageURI(p.mAvatarUri);
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Well would you look at that &ndash; all our presentation logic is where it should be &ndash; completely hidden in the view!</p>

<p>All that&rsquo;s left now is to update our adapter:</p>

<p>``` java Cleaner adapter implementation
public class MyListAdapter extends BaseAdapter {</p>

<pre><code>private List&lt;Person&gt; mPersons;

public MyListAdapter(List&lt;Person&gt; persons) {
    mPersons = persons;
}

@Override
public int getCount() {
    return mPersons == null ? 0 : mPersons.size();
}

@Override
public Person getItem(int position) {
    return mPersons.get(position);
}

@Override
public long getItemId(int position) {
    return getItem(position).mId;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    PersonListItemView personView = (PersonListItemView) convertView;
    if (personView == null) {
        personView = PersonListItemView.inflate(parent);
    }

    final Person p = getItem(position);
    personView.populate(p);

    return personView;
}
</code></pre>

<p>}
```</p>

<p>How easy was that! Our adapter has been greatly simplified and can now focus on it&rsquo;s primary concern &ndash; mapping our underlying data to our view. Nothing more, nothing less :)</p>

<p>This is just a small example of where this kind of custom view can be useful and is by no means limited to just ListView items. You can apply this to any old view &ndash; it&rsquo;s sometimes useful to define your whole activity/fragment view this way, too. Anything you can do to keep your underlying controller class clean, simple and focused.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dp to Px conversion]]></title>
    <link href="http://dgrech.com/blog/2014/03/19/dp-to-px-conversion/"/>
    <updated>2014-03-19T19:08:00+11:00</updated>
    <id>http://dgrech.com/blog/2014/03/19/dp-to-px-conversion</id>
    <content type="html"><![CDATA[<p>There are often times doing Android development when you will need to apply some dimension value directly in your java code. Anyone creating Android UI&rsquo;s should be familiar with the concept of <a href="http://developer.android.com/training/multiscreen/screendensities.html#TaskUseDP">Display-independant pixels</a>. This is most commonly seen in you layout xml definitions.</p>

<p>Sometimes, there is a need to calculate and apply these same dimen values dynamically in your app. Naively, you could try this:</p>

<p>``` java Padding without taking into account display density
public class MyAwesomeActivity extends Activity {</p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // ...

    View view = findViewById(R.id.my_awesome_view);

    // We want to apply 20dp of padding to the view. Simple, no?
    view.setPadding(20, 20, 20, 20);

    // ...
}   
</code></pre>

<p>}
```</p>

<p>The problem with the above snippet is that when applying dimens in your java code, all values are assumed to be in pixel values! This means that things will work fine on an mdpi device (which have a 1 &ndash; 1 ratio between px and dp), but on any screens with a higher density, the padding will be smaller than intended. For example, on an xhdpi screen (with a 2 &ndash; 1 px to dp ratio), the padding will only be equivalent to 10dp!</p>

<p>To fix this, we need to convert our intended dp value into the correct number of pixels for the current device.</p>

<!-- more -->


<p>Luckily Android gives us the tools to do this!</p>

<p>``` java Convert dps to pixels
public static float dpToPixels(Context context, int dps) {</p>

<pre><code>return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dps,
    context.getResources().getDisplayMetrics())
</code></pre>

<p>}</p>

<p>```</p>

<p>With this utility method, it&rsquo;s simply a case of:</p>

<p>``` java Dynamic padding which properly taking into account display metrics
public class MyAwesomeActivity extends Activity {</p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // ...

    View view = findViewById(R.id.my_awesome_view);

    // Hooray - padding will now be 20dp on all devices
    int p = dpToPixels(this, 20);
    view.setPadding(p, p, p, p);

    // ...
}   
</code></pre>

<p>}
```</p>

<p>Note for static values you could also work around this by simply defining your dimension value in a Android resource bucket and referencing it from there (then you get all the goodness that comes with Android resource buckets, such as assigning different values for different screen sizes). For cases where you need to calculate these values dynamically, having this functionality in a utility class can be quite handy</p>

<p>Happy coding everyone!</p>
]]></content>
  </entry>
  
</feed>
